{"version":3,"sources":["library/reducers/menu.ts","library/reducers/request.ts","library/reducers/auth.ts","components/navbar/Navbar.tsx","config/config.ts","pages/home.page/HomePage.tsx","components/menu/Menu.tsx","services/auth.service.ts","library/reducers/register.ts","pages/register.page/RegisterPage.tsx","library/reducers/login.ts","library/reducers/gameSettings.ts","pages/login.page/LoginPage.tsx","library/reducers/counter.ts","library/reducers/activeField.ts","library/reducers/nback.ts","library/reducers/activeSound.ts","library/reducers/round.ts","components/field/Field.tsx","components/grid/Grid.tsx","services/scores.service.ts","library/reducers/scores.ts","services/socket.service.ts","library/reducers/score.ts","components/score/Score.tsx","components/progress/progress-bar/ProgressBar.tsx","library/reducers/field-attempt.ts","library/reducers/sound-attempt.ts","components/game/Game.tsx","pages/game.page/GamePage.tsx","pages/scores.page/ScoresPage.tsx","components/body/Body.tsx","library/reducers/index.ts","library/store.ts","components/progress/Progress.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["menuSlice","createSlice","name","initialState","menuOpen","reducers","menuOpened","state","menuClosed","actions","reducer","requestSlice","requesting","finished","success","failed","message","redirect","requested","action","payload","error","reset","token","id","loggedIn","authSlice","authenticated","cleared","logout","dispatch","a","Request","Navbar","useDispatch","history","useHistory","useSelector","Auth","className","to","Menu","onClick","setTimeout","push","style","cursor","Config","serverUrl","environment","process","socketUrl","HomePage","close","opacity","visibility","AuthService","url","registerUser","data","Axios","post","res","response","status","login","registerSlice","registering","registered","RegisterSchema","Yup","shape","username","required","min","email","password","RegisterPage","goBack","initialValues","validationSchema","onSubmit","values","toString","touched","errors","placeholder","type","GameRunningState","loggingIn","loginSlice","failure","LoginSchema","LoginPage","user","count","counterSlice","increment","activeFieldSlice","field","setActiveField","nBackSlice","n","set","activeSoundSlice","sound","setActiveSound","window","speech","speechSynthesis","langRegex","voice","getVoices","filter","test","lang","console","warn","utterance","SpeechSynthesisUtterance","pitch","rate","volume","speak","roundSlice","rounds","add","addRound","size","getState","Counter","NBack","Math","floor","random","round","session","Finished","widthHeight","timerDuration","gameSettingsSlice","start","Running","Field","props","number","index","ActiveField","active","key","Grid","fields","i","rows","columns","gridTemplateRows","gridTemplateColumns","map","scoresService","getScores","get","this","scores","gettingScores","gotScores","scoresSlice","SocketService","socket","io","connect","emit","on","record","score","scoreSlice","Score","fieldAttempts","FieldAttempt","attempts","soundAttempts","SoundAttempt","useEffect","s","forEach","attempt","nback","Settings","log","addGame","jwt","ProgressBar","indeterminate","width","progress","timed","transition","duration","fieldAttemptSlice","stateField","find","attempted","soundAttemptSlice","Game","barProgress","uuid","v4","timerReset","setInterval","beginGame","nbackRound","Round","r","ActiveSound","GamePage","ScoresPage","integrateCallbacks","Scores","margin","length","Body","openSocket","path","combineReducers","Register","Login","middleware","getDefaultMiddleware","store","configureStore","Reducers","devTools","Progress","request","resetMessage","renderText","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","fetch","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7e967992.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst menuSlice = createSlice({\n  name: 'menu',\n  initialState: {\n    menuOpen: false,\n  },\n  reducers: {\n    menuOpened: (state) => ({ ...state, menuOpen: true }),\n    menuClosed: (state) => ({ ...state, menuOpen: false }),\n  },\n});\n\nconst { actions, reducer } = menuSlice;\n\nexport const { menuOpened: menuOpened, menuClosed: menuClosed } = actions;\nexport default reducer;\n","import { createSlice, PayloadAction, createReducer } from '@reduxjs/toolkit';\nimport * as Register from './register';\n\nexport interface RequestState {\n  requesting: boolean;\n  finished: boolean;\n  success: boolean;\n  failed: boolean;\n  message: string;\n  redirect: string;\n}\n\nconst initialState: RequestState = {\n  requesting: false,\n  finished: false,\n  success: false,\n  failed: false,\n  message: '',\n  redirect: '',\n};\n\nconst requestSlice = createSlice({\n  name: 'request',\n  initialState,\n  reducers: {\n    requested: (\n      state: RequestState,\n      action: PayloadAction<{ redirect: string }>,\n    ) => ({\n      ...state,\n      requesting: true,\n      finished: false,\n      success: false,\n      failed: false,\n      message: '',\n      redirect: action.payload.redirect,\n    }),\n    finished: (\n      state: RequestState,\n      action: PayloadAction<{ message: string }>,\n    ) => ({\n      ...state,\n      requesting: false,\n      success: true,\n      finished: true,\n      message: action.payload.message,\n    }),\n    error: (state: RequestState, action: PayloadAction<{ error: string }>) => ({\n      ...state,\n      requesting: false,\n      finished: true,\n      success: false,\n      failed: true,\n      message: action.payload.error,\n    }),\n    reset: (state: RequestState) => ({\n      requesting: false,\n      finished: false,\n      success: false,\n      failed: false,\n      message: '',\n      redirect: '',\n    }),\n  },\n});\n\nconst { reducer, actions } = requestSlice;\n\nexport const { requested, finished, error, reset } = actions;\nexport default reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport * as Request from './request';\n\nexport interface AuthState {\n  token: string;\n  id: string;\n  loggedIn: boolean;\n}\n\nconst initialState: AuthState = {\n  token: '',\n  id: '',\n  loggedIn: false,\n};\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    authenticated: (\n      state: AuthState,\n      action: PayloadAction<{ token: string; id: string }>,\n    ) => ({\n      ...action.payload,\n      loggedIn: true,\n    }),\n    cleared: (state: AuthState) => ({ ...initialState }),\n  },\n});\n\nconst { actions, reducer } = authSlice;\n\nexport const { authenticated, cleared } = actions;\n\nexport const logout = () => {\n  return async (dispatch: any) => {\n    dispatch(cleared());\n    dispatch(Request.finished({ message: \"You've logged out\" }));\n  };\n};\n\nexport default reducer;\n","import React, { useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport './Navbar.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { menuClosed, menuOpened } from '../../library/reducers/menu';\nimport { logout } from '../../library/reducers/auth';\n\nconst Navbar: React.FC = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const { loggedIn } = useSelector((state: any) => state.Auth);\n\n  return (\n    <div className='navbar base'>\n      <nav className='nav'>\n        <h3 className='logo'>\n          <Link to='/'>DNB</Link>\n        </h3>\n        {!useSelector((state: any) => state.Menu.menuOpen) ? (\n          <>\n            <ul className='actions'>\n              <li className='actions-play'>\n                <Link to='/play'>PLAY GAME</Link>\n              </li>\n              <li className='actions-scores'>\n                <Link to='/scores'>SCORES</Link>\n              </li>\n            </ul>\n            <ul className='user-actions'>\n              {loggedIn ? (\n                <li className='logout'>\n                  <a\n                    style={{ cursor: 'pointer' }}\n                    onClick={() => dispatch(logout())}\n                  >\n                    LOGOUT\n                  </a>\n                </li>\n              ) : (\n                <>\n                  <li className='login'>\n                    <Link to='/login'>LOGIN</Link>\n                  </li>\n                  <li className='register'>\n                    <Link to='/register'>REGISTER</Link>\n                  </li>\n                </>\n              )}\n            </ul>\n            <span className='menu' onClick={() => dispatch(menuOpened())}>\n              <div className='open-icon-base'>\n                <div className='icon-row'></div>\n              </div>\n            </span>\n          </>\n        ) : (\n          <span\n            className='close-menu'\n            onClick={() => {\n              dispatch(menuClosed());\n              setTimeout(() => {\n                history.push('/home');\n              }, 500);\n            }}\n          >\n            <div className='close-icon-base'></div>\n          </span>\n        )}\n      </nav>\n    </div>\n  );\n};\n\nexport default Navbar;\n","export class Config {\n  public static environment = process.env.REACT_APP_ENVIRONMENT;\n  public static serverUrl =\n    Config.environment == 'production'\n      ? 'https://itweb-g12-a3-api.herokuapp.com'\n      : Config.environment == 'staging'\n      ? 'https://itweb-g12-a3-api-staging.herokuapp.com'\n      : 'http://localhost:8080';\n\n  public static socketUrl =\n    Config.environment == 'production'\n      ? 'ws://itweb-g12-a3-api.herokuapp.com'\n      : Config.environment == 'staging'\n      ? 'ws://itweb-g12-a3-api-staging.herokuapp.com'\n      : 'ws://localhost:8080';\n}\n","import React from 'react';\nimport './HomePage.scss';\nimport { Config } from '../../config/config';\n\nexport const HomePage = () => {\n  return (\n    <div className='home-page'>\n      <div className='container'>\n        <h1 className='heading'>Home</h1>\n        <div className='content'>\n          <p>{process.env.REACT_APP_ENVIRONMENT}</p>\n          <p>{Config.serverUrl}</p>\n          <p>\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Laboriosam\n            enim tenetur similique aspernatur, impedit odit quisquam dolor\n            temporibus numquam dolores nam, amet, explicabo aliquid. Illum\n            mollitia beatae qui vel asperiores!\n          </p>\n          <p>\n            Lorem, ipsum dolor sit amet consectetur adipisicing elit. Ipsam nemo\n            sapiente recusandae eligendi, provident molestiae placeat laborum\n            est neque? Accusamus, eaque veritatis doloremque possimus\n            necessitatibus impedit nemo quis porro eligendi.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport './Menu.scss';\nimport { Link } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { menuClosed } from '../../library/reducers/menu';\nimport { logout } from '../../library/reducers/auth';\n\nexport const Menu = () => {\n  const { menuOpen } = useSelector((state: any) => state.Menu);\n  const dispatch = useDispatch();\n\n  const close = () => dispatch(menuClosed());\n\n  const { loggedIn } = useSelector((state: any) => state.Auth);\n\n  return (\n    <div\n      className='menu-content'\n      style={{\n        opacity: menuOpen ? 1.0 : 0.0,\n        visibility: menuOpen ? 'visible' : 'hidden',\n      }}\n    >\n      <div className='container'>\n        <ul className='actions'>\n          <li className='actions-play'>\n            <Link to='/play' onClick={() => close()}>\n              PLAY GAME\n            </Link>\n          </li>\n          <li className='actions-scores'>\n            <Link to='/scores' onClick={() => close()}>\n              SCORES\n            </Link>\n          </li>\n        </ul>\n        <div className='divider'></div>\n\n        <ul className='user-actions'>\n          {loggedIn ? (\n            <li className='logout'>\n              <a\n                style={{ cursor: 'pointer' }}\n                onClick={() => {\n                  dispatch(logout());\n                  close();\n                }}\n              >\n                LOGOUT\n              </a>\n            </li>\n          ) : (\n            <>\n              <li className='login'>\n                <Link to='/login' onClick={() => close()}>\n                  LOGIN\n                </Link>\n              </li>\n              <li className='register'>\n                <Link to='/register' onClick={() => close()}>\n                  REGISTER\n                </Link>\n              </li>\n            </>\n          )}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import Axios, { AxiosResponse } from 'axios';\nimport { Config } from '../config/config';\n\nexport interface RegisterUserData {\n  username: string;\n  email: string;\n  password: string;\n}\n\nexport interface RegisteredUserData {\n  id: string;\n  username: string;\n  email: string;\n  password: string;\n}\n\nexport interface LoginUserData {\n  username: string;\n  password: string;\n}\n\nexport interface LoggedInUserData {\n  id: string;\n  token: string;\n}\n\nexport interface ErrorResponse {\n  status: string;\n}\n\nexport class AuthService {\n  private static url = Config.serverUrl;\n\n  public static registerUser = async (\n    data: RegisterUserData,\n  ): Promise<RegisteredUserData> => {\n    try {\n      const res: AxiosResponse<RegisteredUserData> = await Axios.post(\n        AuthService.url + '/register',\n        data,\n      );\n      return res.data;\n    } catch (error) {\n      if (\n        error.response &&\n        error.response.status === 400 &&\n        error.response.data.status\n      ) {\n        throw error.response.data.status;\n      }\n      throw error;\n    }\n  };\n\n  public static login = async (\n    data: LoginUserData,\n  ): Promise<LoggedInUserData> => {\n    try {\n      const res: AxiosResponse<LoggedInUserData> = await Axios.post(\n        AuthService.url + '/authenticate',\n        data,\n      );\n      return res.data;\n    } catch (error) {\n      if (\n        error.response &&\n        error.response.status === 400 &&\n        error.response.data.status\n      ) {\n        throw error.response.data.status;\n      }\n      throw error;\n    }\n  };\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AuthService } from '../../services/auth.service';\nimport * as Request from './request';\n\nexport interface RegisterState {\n  registering: boolean;\n  registered: boolean;\n  error: string;\n}\n\nconst initialState = {\n  registering: false,\n  registered: false,\n  error: '',\n};\n\nconst registerSlice = createSlice({\n  name: 'register',\n  initialState,\n  reducers: {\n    requested: (state) => ({ ...state, registering: true, error: '' }),\n    success: (state) => ({\n      ...state,\n      registered: true,\n      registering: false,\n      error: '',\n    }),\n    failed: (state, action: PayloadAction<string>) => ({\n      ...state,\n      registering: false,\n      registered: false,\n      error: action.payload,\n    }),\n    reset: (state) => ({\n      registered: false,\n      registering: false,\n      error: '',\n    }),\n  },\n});\n\nconst { actions, reducer } = registerSlice;\n\nexport const { requested, success, failed, reset } = actions;\nexport default reducer;\n\nexport const registerUser = (\n  username: string,\n  email: string,\n  password: string,\n) => async (dispatch: any) => {\n  dispatch(Request.requested({ redirect: '/login' }));\n  dispatch(requested());\n\n  try {\n    const user = await AuthService.registerUser({\n      username,\n      email,\n      password,\n    });\n    if (user.id) {\n      dispatch(\n        Request.finished({ message: 'User was successfully registered' }),\n      );\n      dispatch(success());\n    } else {\n      dispatch(Request.error({ error: 'Try again later' }));\n      dispatch(failed(\"Something wen't wrong\"));\n    }\n  } catch (error) {\n    dispatch(Request.error({ error: error.toString() }));\n    dispatch(failed(error.toString()));\n  }\n};\n","import React from 'react';\n\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\nimport './RegisterPage.scss';\nimport { useHistory } from 'react-router';\nimport { registerUser, RegisterState } from '../../library/reducers/register';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst RegisterSchema = Yup.object().shape({\n  username: Yup.string()\n    .required('Username is required')\n    .min(2, 'Your Username is too short'),\n  email: Yup.string()\n    .required('Email is required')\n    .email('Your email is invalid'),\n  password: Yup.string()\n    .required('Password is required')\n    .min(8, 'Your password is too short'),\n});\n\nconst RegisterPage = () => {\n  const dispatch = useDispatch();\n\n  const history = useHistory();\n  return (\n    <div className='register-page'>\n      <div className='container'>\n        <div className='heading'>\n          <h4 className='register-title'>Register</h4>\n          <span className='register-close'>\n            <span className='close-menu' onClick={() => history.goBack()}>\n              <div className='close-icon-base'></div>\n            </span>\n          </span>\n        </div>\n        <Formik\n          initialValues={{\n            username: '',\n            email: '',\n            password: '',\n          }}\n          validationSchema={RegisterSchema}\n          onSubmit={(values) => {\n            dispatch(\n              registerUser(values.username, values.email, values.password),\n            );\n          }}\n        >\n          {({ touched, errors }) => (\n            <Form className='register-form'>\n              <div className='username'>\n                <Field name='username' placeholder='Username' />\n                {errors.username && touched.username ? (\n                  <div className='error'>{errors.username}</div>\n                ) : null}\n              </div>\n              <div className='email'>\n                <Field name='email' type='email' placeholder='Email' />\n                {errors.email && touched.email ? (\n                  <div className='error'>{errors.email}</div>\n                ) : null}\n              </div>\n              <div className='password'>\n                <Field name='password' placeholder='Password' type='password' />\n                {errors.password && touched.password ? (\n                  <div className='error'>{errors.password}</div>\n                ) : null}\n              </div>\n              <button type='submit'>REGISTER</button>\n            </Form>\n          )}\n        </Formik>\n      </div>\n    </div>\n  );\n};\n\nexport default RegisterPage;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport * as Request from './request';\nimport * as Auth from './auth';\nimport { AuthService } from '../../services/auth.service';\n\nexport interface LoginState {\n  loggingIn: boolean;\n  loggedIn: boolean;\n  error: string;\n}\n\nconst initialState: LoginState = {\n  loggingIn: false,\n  loggedIn: false,\n  error: '',\n};\n\nconst loginSlice = createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    requested: (state) => ({\n      loggingIn: true,\n      ...initialState,\n    }),\n    success: (state) => ({\n      loggedIn: true,\n      ...initialState,\n    }),\n    failure: (state, action: PayloadAction<{ error: string }>) => ({\n      error: action.payload.error,\n      ...initialState,\n    }),\n    reset: (state) => ({\n      ...initialState,\n    }),\n  },\n});\n\nconst { actions, reducer } = loginSlice;\nexport const { requested, success, failure, reset } = actions;\nexport default reducer;\n\nexport const login = (username: string, password: string) => {\n  return async (dispatch: any) => {\n    dispatch(Request.requested({ redirect: '/home' }));\n    dispatch(requested());\n\n    try {\n      const user = await AuthService.login({\n        username,\n        password,\n      });\n      dispatch(Auth.authenticated(user));\n      dispatch(Request.finished({ message: 'You were logged in' }));\n      dispatch(success());\n    } catch (error) {\n      dispatch(Request.error({ error: error.toString() }));\n      dispatch(failure(error.toString()));\n    }\n  };\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { reset as timerReset, increment } from './counter';\nimport { add, addRound } from './round';\nimport uuid from 'uuid';\n\nexport enum GameRunningState {\n  Running = 'running',\n  Finished = 'finished',\n}\n\nexport interface GameSettingsState {\n  session: string;\n  state: GameRunningState;\n  widthHeight: number;\n  timerDuration: number;\n}\n\nconst initialState: GameSettingsState = {\n  session: '',\n  state: GameRunningState.Finished,\n  widthHeight: 3,\n  timerDuration: 5,\n};\n\nconst gameSettingsSlice = createSlice({\n  name: 'settings',\n  initialState,\n  reducers: {\n    start: (\n      state: GameSettingsState,\n      action: PayloadAction<{\n        widthHeight: number;\n        timerDuration: number;\n        session: string;\n      }>,\n    ) => ({\n      widthHeight: action.payload.widthHeight,\n      timerDuration: action.payload.timerDuration,\n      state: GameRunningState.Running,\n      session: action.payload.session,\n    }),\n    finished: (state: GameSettingsState) => ({\n      ...initialState,\n    }),\n  },\n});\n\nconst { actions, reducer } = gameSettingsSlice;\n\nexport const { start, finished } = actions;\nexport default reducer;\n\nexport const beginGame = (size: number, timerDuration: number) => {\n  return async (dispatch: any) => {\n    const session = uuid.v4();\n    dispatch(start({ widthHeight: size, timerDuration, session }));\n    dispatch(timerReset());\n    setInterval(() => {\n      dispatch(increment());\n      dispatch(addRound(size));\n    }, timerDuration * 1000);\n  };\n};\n","import React from 'react';\n\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\nimport './LoginPage.scss';\nimport { Router, useHistory } from 'react-router';\nimport { useDispatch } from 'react-redux';\nimport { login } from '../../library/reducers/login';\n\nconst LoginSchema = Yup.object().shape({\n  username: Yup.string()\n    .required('Username is required')\n    .min(2, 'Your Username is too short'),\n  password: Yup.string()\n    .required('Password is required')\n    .min(8, 'Your password is too short'),\n});\n\nconst LoginPage = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  return (\n    <div className='login-page'>\n      <div className='container'>\n        <div className='heading'>\n          <h4 className='login-title'>Login</h4>\n          <span className='login-close'>\n            <span className='close-menu' onClick={() => history.goBack()}>\n              <div className='close-icon-base'></div>\n            </span>\n          </span>\n        </div>\n        <div className='login-errors'></div>\n        <Formik\n          initialValues={{\n            username: '',\n            password: '',\n          }}\n          validationSchema={LoginSchema}\n          onSubmit={(values) => {\n            dispatch(login(values.username, values.password));\n          }}\n        >\n          {({ touched, errors }) => (\n            <Form className='login-form'>\n              <div className='username'>\n                <Field name='username' placeholder='Username' />\n                {errors.username && touched.username ? (\n                  <div className='error'>{errors.username}</div>\n                ) : null}\n              </div>\n              <div className='password'>\n                <Field name='password' placeholder='Password' type='password' />\n                {errors.password && touched.password ? (\n                  <div className='error'>{errors.password}</div>\n                ) : null}\n              </div>\n              <button type='submit'>LOGIN</button>\n            </Form>\n          )}\n        </Formik>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginPage;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport interface CounterState {\n  count: number;\n}\n\nconst initialState: CounterState = {\n  count: 0,\n};\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: (state: CounterState) => ({ count: state.count + 1 }),\n    reset: (state: CounterState) => initialState,\n  },\n});\n\nconst { actions, reducer } = counterSlice;\n\nexport const { increment, reset } = actions;\nexport default reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface ActiveFieldState {\n  field: number;\n}\n\nconst initialState: ActiveFieldState = {\n  field: 0,\n};\n\nconst activeFieldSlice = createSlice({\n  name: 'activeField',\n  initialState,\n  reducers: {\n    setActiveField: (\n      state: ActiveFieldState,\n      action: PayloadAction<number>,\n    ) => ({\n      field: action.payload,\n    }),\n  },\n});\n\nconst { actions, reducer } = activeFieldSlice;\n\nexport const { setActiveField } = actions;\nexport default reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport interface NBackState {\n  n: number;\n}\n\nconst initialState: NBackState = {\n  n: 1,\n};\n\nconst nBackSlice = createSlice({\n  name: 'nBack',\n  initialState,\n  reducers: {\n    set: (state: NBackState) => ({ n: state.n + 1 }),\n  },\n});\n\nconst { actions, reducer } = nBackSlice;\n\nexport const { set } = actions;\nexport default reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface ActiveSoundState {\n  sound: number;\n}\n\nconst initialState: ActiveSoundState = {\n  sound: 0,\n};\n\nconst activeSoundSlice = createSlice({\n  name: 'activeSound',\n  initialState,\n  reducers: {\n    setActiveSound: (\n      state: ActiveSoundState,\n      action: PayloadAction<number>,\n    ) => ({\n      sound: action.payload,\n    }),\n  },\n});\n\nconst { actions, reducer } = activeSoundSlice;\n\nexport default reducer;\n\nexport const setActiveSound = (sound: number) => {\n  const sounds = 'ABCDEFGHIJKLMNOPQRSTUVXYZ1234567890';\n\n  return async (dispatch: any) => {\n    dispatch(actions.setActiveSound(sound));\n    if ('speechSynthesis' in window) {\n      const speech = window.speechSynthesis;\n\n      var langRegex = /^en(-[a-z]{2})?$/i;\n\n      const voice = speech\n        .getVoices()\n        .filter((voice) => langRegex.test(voice.lang))[0];\n      console.warn(voice);\n      console.warn(speech.getVoices());\n\n      const utterance = new SpeechSynthesisUtterance(sounds[sound - 1]);\n\n      utterance.voice = voice;\n      utterance.pitch = 1;\n      utterance.rate = 1;\n      utterance.volume = 1;\n\n      speech.speak(utterance);\n    }\n  };\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { CounterState } from './counter';\nimport { setActiveField } from './activeField';\nimport { NBackState, set } from './nback';\nimport { setActiveSound } from './activeSound';\n\nexport interface Round {\n  round: number;\n  field: number;\n  sound: number;\n}\n\nexport interface RoundState {\n  rounds: Round[];\n}\n\nconst initialState: RoundState = {\n  rounds: [],\n};\n\nconst roundSlice = createSlice({\n  name: 'rounds',\n  initialState,\n  reducers: {\n    add: (state: RoundState, action: PayloadAction<Round>) => {\n      return {\n        rounds: [...state.rounds, action.payload],\n      };\n    },\n  },\n});\n\nconst { actions, reducer } = roundSlice;\nexport const { add } = actions;\nexport default reducer;\n\nexport const addRound = (size: number) => {\n  return async (dispatch: any, getState: any) => {\n    const state: { Counter: CounterState; NBack: NBackState } = getState();\n\n    const count = state.Counter.count;\n    const n = state.NBack.n;\n\n    const field = Math.floor(Math.random() * size ** 2) + 1;\n    const sound = Math.floor(Math.random() * size ** 2) + 1;\n\n    dispatch(\n      add({\n        round: count,\n        field,\n        sound,\n      }),\n    );\n    dispatch(setActiveField(field));\n    dispatch(setActiveSound(sound));\n\n    const cn = Math.floor(count / 10) + 1;\n    if (cn !== n) {\n      dispatch(set());\n    }\n  };\n};\n","import React from 'react';\nimport './Field.scss';\nimport { useSelector } from 'react-redux';\nimport { ActiveFieldState } from '../../library/reducers/activeField';\nimport { RoundState } from '../../library/reducers/round';\nimport { CounterState } from '../../library/reducers/counter';\n\nconst Field: React.FC<{ index: number }> = (props) => {\n  const number = props.index + 1;\n  const { field } = useSelector(\n    (state: { ActiveField: ActiveFieldState }) => state.ActiveField,\n  );\n\n  const { count } = useSelector(\n    (state: { Counter: CounterState }) => state.Counter,\n  );\n\n  const active = field === number;\n  return (\n    <div\n      key={props.index + count}\n      className={active ? 'field active' : 'field'}\n    >\n      {number}\n    </div>\n  );\n};\n\nexport default Field;\n","import React, { useEffect } from 'react';\nimport './Grid.scss';\nimport Field from '../field/Field';\n\nexport interface GridProps {\n  rows: number;\n  columns: number;\n}\n\nconst Grid: React.FC<GridProps> = (props) => {\n  let fields: number[] = [];\n  let count = 0;\n  for (let i = 0; i < props.rows * props.columns; i++) {\n    count++;\n    fields.push(count);\n  }\n\n  const renderFields = () => {\n    return fields.map((field, index) => {\n      return <Field index={index} />;\n    });\n  };\n\n  return (\n    <div className='grid'>\n      {\n        <div\n          className='container'\n          style={{\n            gridTemplateRows: `repeat(${props.rows}, 1fr)`,\n            gridTemplateColumns: `repeat(${props.columns}, 1fr)`,\n          }}\n        >\n          {renderFields()}\n        </div>\n      }\n    </div>\n  );\n};\n\nexport default Grid;\n","import { Score } from '../library/reducers/scores';\nimport Axios, { AxiosResponse } from 'axios';\nimport { Config } from '../config/config';\n\nexport default class ScoresService {\n  constructor() {\n    this.url = Config.serverUrl;\n  }\n\n  private url: string;\n\n  public getScores = async (): Promise<Score[]> => {\n    const response: AxiosResponse<Score[]> = await Axios.get(\n      this.url + '/scores/10',\n    );\n    return response.data;\n  };\n}\n\nexport const scoresService = new ScoresService();\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport * as Request from './request';\nimport { scoresService } from '../../services/scores.service';\nimport { AuthState } from './auth';\n\nexport interface Score {\n  score: number;\n  username: string;\n}\n\nexport interface ScoresState {\n  scores: Score[];\n  gettingScores: boolean;\n  gotScores: boolean;\n  error: string;\n}\n\nconst initialState: ScoresState = {\n  scores: [],\n  gettingScores: false,\n  gotScores: false,\n  error: '',\n};\n\nconst scoresSlice = createSlice({\n  name: 'scores',\n  initialState,\n  reducers: {\n    requested: (state: ScoresState) => ({\n      ...initialState,\n      gettingScores: false,\n      scores: state.scores,\n    }),\n    success: (\n      state: ScoresState,\n      action: PayloadAction<{ scores: Score[] }>,\n    ) => ({\n      ...initialState,\n      gotScores: true,\n      scores: action.payload.scores,\n    }),\n    failure: (state: ScoresState, action: PayloadAction<{ error: any }>) => ({\n      ...initialState,\n      error: action.payload.error,\n      scores: state.scores,\n    }),\n  },\n});\n\nconst { actions, reducer } = scoresSlice;\nexport default reducer;\n\nexport const getScores = () => {\n  return async (dispatch: any) => {\n    dispatch(actions.requested());\n\n    try {\n      const scores = await scoresService.getScores();\n      dispatch(actions.success({ scores }));\n    } catch (error) {\n      dispatch(actions.failure({ error: toString() }));\n    }\n  };\n};\n","import { Config } from '../config/config';\nimport io from 'socket.io-client';\nimport { getScores } from '../library/reducers/scores';\n\nexport class SocketService {\n  private static url = Config.serverUrl;\n  private static socket: any;\n\n  public static openSocket() {\n    this.socket = io.connect(this.url);\n  }\n  public static addGame(payload: {\n    jwt: string;\n    score: number;\n    session: string;\n  }) {\n    this.socket.emit('add-score', payload);\n  }\n  public static integrateCallbacks(dispatch: any) {\n    this.socket.on('score-updated', (record: any) => {\n      dispatch(getScores());\n    });\n  }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { SocketService } from '../../services/socket.service';\nimport { AuthState } from './auth';\nimport { GameSettingsState } from './gameSettings';\n\nexport interface ScoreState {\n  score: number;\n}\n\nconst initialState: ScoreState = {\n  score: 0,\n};\n\nconst scoreSlice = createSlice({\n  name: 'score',\n  initialState,\n  reducers: {\n    add: (state: ScoreState, action: PayloadAction<number>) => ({\n      score: action.payload,\n    }),\n    reset: (state: ScoreState) => initialState,\n  },\n});\n\nconst { actions, reducer } = scoreSlice;\nexport const { reset } = actions;\nexport default reducer;\n\nexport const add = (payload: number) => {\n  return async (dispatch: any, getState: any) => {\n    const state: {\n      Auth: AuthState;\n      Settings: GameSettingsState;\n    } = getState();\n\n    dispatch(actions.add(payload));\n\n    if ((state.Auth.loggedIn && state.Settings.session, state.Auth.id)) {\n      console.log('In here');\n      SocketService.addGame({\n        jwt: state.Auth.token,\n        score: payload,\n        session: state.Settings.session,\n      });\n    }\n  };\n};\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { FieldAttemptState } from '../../library/reducers/field-attempt';\nimport { SoundAttemptState } from '../../library/reducers/sound-attempt';\nimport './Score.scss';\nimport * as ScoreActions from '../../library/reducers/score';\n\nconst Score = () => {\n  const dispatch = useDispatch();\n  const fieldAttempts = useSelector(\n    (state: { FieldAttempt: FieldAttemptState }) => state.FieldAttempt.attempts,\n  );\n  const soundAttempts = useSelector(\n    (state: { SoundAttempt: SoundAttemptState }) => state.SoundAttempt.attempts,\n  );\n\n  const { score } = useSelector(\n    (state: { Score: ScoreActions.ScoreState }) => state.Score,\n  );\n\n  useEffect(() => {\n    let s = 0;\n    const factor = 10; //TODO: extract from game settings.\n    fieldAttempts.forEach((attempt) => {\n      if (attempt.success) {\n        s += attempt.nback * factor;\n      } else {\n        s -= attempt.nback * factor;\n      }\n    });\n\n    soundAttempts.forEach((attempt) => {\n      if (attempt.success) {\n        s += attempt.nback * factor;\n      } else {\n        s -= attempt.nback * factor;\n      }\n    });\n\n    dispatch(ScoreActions.add(s));\n  }, [fieldAttempts, soundAttempts]);\n\n  return <div>Score: {score}</div>;\n};\n\nexport default Score;\n","import React from 'react';\nimport './ProgressBar.scss';\n\nexport const ProgressBar = (props: {\n  indeterminate?: boolean;\n  query?: boolean;\n  timed?: boolean;\n  duration?: number;\n  progress?: number;\n}) => {\n  const renderType = () => {\n    if (props.indeterminate == true) {\n      return <div className='indeterminate'></div>;\n    } else if (props.indeterminate == false) {\n      return (\n        <div\n          className='determinate'\n          style={{ width: `${props.progress as number}%` }}\n        ></div>\n      );\n    } else if (props.timed == true) {\n      return (\n        <div\n          className='timed'\n          style={{\n            width: `${props.progress as number}%`,\n            transition: `width ${props.duration}s linear`,\n          }}\n        ></div>\n      );\n    }\n\n    return null;\n  };\n\n  return <div className='progress-bar'>{renderType()}</div>;\n};\n\nexport default ProgressBar;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RoundState } from './round';\nimport { ActiveFieldState } from './activeField';\nimport { NBackState } from './nback';\nimport { CounterState } from './counter';\n\nexport interface FieldAttempt {\n  round: number;\n  nback: number;\n  success: boolean;\n  attempted: boolean;\n}\n\nexport interface FieldAttemptState {\n  attempts: FieldAttempt[];\n}\n\nconst initialState: FieldAttemptState = {\n  attempts: [],\n};\n\nconst fieldAttemptSlice = createSlice({\n  name: 'field-attempt',\n  initialState,\n  reducers: {\n    add: (\n      state: FieldAttemptState,\n      action: PayloadAction<{ round: number; nback: number; success: boolean }>,\n    ) => {\n      const { round, nback, success } = action.payload;\n\n      const stateField = state.attempts.find(\n        (attempt) => attempt.round == round,\n      );\n\n      if (stateField == null || stateField.attempted == false) {\n        return {\n          attempts: [\n            ...state.attempts,\n            {\n              round,\n              nback,\n              success,\n              attempted: true,\n            },\n          ],\n        };\n      }\n    },\n    reset: (state: FieldAttemptState) => initialState,\n  },\n});\n\nconst { actions, reducer } = fieldAttemptSlice;\n\nexport const { reset } = actions;\nexport default reducer;\n\nexport const attempt = () => {\n  return async (dispatch: any, getState: any) => {\n    const state: {\n      Round: RoundState;\n      FieldAttempt: FieldAttemptState;\n      ActiveField: ActiveFieldState;\n      NBack: NBackState;\n      Counter: CounterState;\n    } = getState();\n\n    const field = state.ActiveField.field;\n    const round = state.Counter.count;\n    const nback = state.NBack.n;\n    const nbackRound = state.Round.rounds.find((r) => r.round == round - nback);\n\n    if (nbackRound) {\n      dispatch(\n        actions.add({\n          round,\n          nback,\n          success: nbackRound.field == field,\n        }),\n      );\n    }\n  };\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RoundState } from './round';\nimport { ActiveFieldState } from './activeField';\nimport { NBackState } from './nback';\nimport { CounterState } from './counter';\nimport { ActiveSoundState } from './activeSound';\n\nexport interface SoundAttempt {\n  round: number;\n  nback: number;\n  success: boolean;\n  attempted: boolean;\n}\n\nexport interface SoundAttemptState {\n  attempts: SoundAttempt[];\n}\n\nconst initialState: SoundAttemptState = {\n  attempts: [],\n};\n\nconst soundAttemptSlice = createSlice({\n  name: 'sound-attempt',\n  initialState,\n  reducers: {\n    add: (\n      state: SoundAttemptState,\n      action: PayloadAction<{ round: number; nback: number; success: boolean }>,\n    ) => {\n      const { round, nback, success } = action.payload;\n\n      const stateField = state.attempts.find(\n        (attempt) => attempt.round == round,\n      );\n\n      if (stateField == null || stateField.attempted == false) {\n        return {\n          attempts: [\n            ...state.attempts,\n            {\n              round,\n              nback,\n              success,\n              attempted: true,\n            },\n          ],\n        };\n      }\n    },\n    reset: (state: SoundAttemptState) => initialState,\n  },\n});\n\nconst { actions, reducer } = soundAttemptSlice;\n\nexport const { reset } = actions;\nexport default reducer;\n\nexport const attempt = () => {\n  return async (dispatch: any, getState: any) => {\n    const state: {\n      Round: RoundState;\n      SoundAttempt: SoundAttemptState;\n      ActiveSound: ActiveSoundState;\n      NBack: NBackState;\n      Counter: CounterState;\n    } = getState();\n\n    const sound = state.ActiveSound.sound;\n    const round = state.Counter.count;\n    const nback = state.NBack.n;\n    const nbackRound = state.Round.rounds.find((r) => r.round == round - nback);\n\n    if (nbackRound) {\n      dispatch(\n        actions.add({\n          round,\n          nback,\n          success: nbackRound.sound == sound,\n        }),\n      );\n    }\n  };\n};\n","import React from 'react';\nimport './Game.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  GameSettingsState,\n  GameRunningState,\n  beginGame,\n} from '../../library/reducers/gameSettings';\nimport Grid from '../grid/Grid';\nimport Score from '../score/Score';\nimport ProgressBar from '../progress/progress-bar/ProgressBar';\nimport { CounterState } from '../../library/reducers/counter';\nimport { NBackState } from '../../library/reducers/nback';\nimport * as FieldAttempt from '../../library/reducers/field-attempt';\nimport * as SoundAttempt from '../../library/reducers/sound-attempt';\n\nconst Game: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const { state, widthHeight, timerDuration } = useSelector(\n    (state: { Settings: GameSettingsState }) => state.Settings,\n  );\n\n  const count = useSelector(\n    (state: { Counter: CounterState }) => state.Counter.count,\n  );\n\n  const { n } = useSelector((state: { NBack: NBackState }) => state.NBack);\n\n  const barProgress = count % 2 == 0 ? 0 : 100;\n\n  if (state == GameRunningState.Finished) {\n    return (\n      <div className='game-finished'>\n        <div className='game-banner'>\n          <span className='game-title'>Play the game</span>\n          <button\n            className='game-play-button'\n            onClick={() => dispatch(beginGame(2, 3))}\n          >\n            Play\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className='game-running'>\n      <div className='counter'>\n        Counter <span className='counter-letter'>N</span>={n}\n      </div>\n      <div className='grid'>\n        <Grid rows={widthHeight} columns={widthHeight}></Grid>\n      </div>\n      <div className='buttons'>\n        <button\n          className='place'\n          onClick={() => dispatch(FieldAttempt.attempt())}\n        >\n          Place\n        </button>\n        <button\n          className='sound'\n          onClick={() => dispatch(SoundAttempt.attempt())}\n        >\n          Sound\n        </button>\n      </div>\n      <div className='progress'>\n        <ProgressBar\n          timed={true}\n          duration={timerDuration - 0.2}\n          progress={barProgress}\n        ></ProgressBar>\n      </div>\n      <div className='score'>\n        <Score></Score>\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n","import React from 'react';\nimport './GamePage.scss';\nimport Game from '../../components/game/Game';\n\nconst GamePage = () => {\n  return (\n    <div className='game-page'>\n      <div className='container'>\n        <Game></Game>\n      </div>\n    </div>\n  );\n};\n\nexport default GamePage;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ScoresState, getScores } from '../../library/reducers/scores';\nimport { SocketService } from '../../services/socket.service';\n\nimport './ScoresPage.scss';\n\nconst ScoresPage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getScores());\n\n    SocketService.integrateCallbacks(dispatch);\n  }, []);\n\n  const { scores } = useSelector(\n    (state: { Scores: ScoresState }) => state.Scores,\n  );\n\n  return (\n    <div className='scores-page'>\n      {scores.map((score, i) => (\n        <>\n          <div className='score' key={i} style={{ margin: '0 auto' }}>\n            <span className='ranking'>{i + 1}</span>\n            <span className='amount'>{score.score}</span>\n            <span className='username'>{score.username}</span>\n          </div>\n          {scores.length - 1 !== i ? <div className='divider'></div> : null}\n        </>\n      ))}\n    </div>\n  );\n};\n\nexport default ScoresPage;\n","import React, { useEffect } from 'react';\n\nimport { Switch, Route } from 'react-router-dom';\nimport { HomePage } from '../../pages/home.page/HomePage';\nimport { Menu } from '../menu/Menu';\nimport './Body.scss';\nimport RegisterPage from '../../pages/register.page/RegisterPage';\nimport LoginPage from '../../pages/login.page/LoginPage';\nimport GamePage from '../../pages/game.page/GamePage';\nimport ScoresPage from '../../pages/scores.page/ScoresPage';\nimport { useSelector } from 'react-redux';\nimport { AuthState } from '../../library/reducers/auth';\nimport { SocketService } from '../../services/socket.service';\n\nconst Body: React.FC = () => {\n  SocketService.openSocket();\n\n  return (\n    <div className='body-container'>\n      <Menu></Menu>\n      <Switch>\n        <Route path='/play'>\n          <GamePage></GamePage>\n        </Route>\n        <Route path='/scores'>\n          <ScoresPage></ScoresPage>\n        </Route>\n        <Route path='/login'>\n          <LoginPage></LoginPage>\n        </Route>\n        <Route path='/register'>\n          <RegisterPage></RegisterPage>\n        </Route>\n        <Route path='/*'>\n          <HomePage></HomePage>\n        </Route>\n      </Switch>\n    </div>\n  );\n};\n\nexport default Body;\n","import Menu from './menu';\nimport Register from './register';\nimport Request from './request';\nimport Login from './login';\nimport Auth from './auth';\nimport Settings from './gameSettings';\nimport ActiveField from './activeField';\nimport Counter from './counter';\nimport Round from './round';\nimport NBack from './nback';\nimport FieldAttempt from './field-attempt';\nimport ActiveSound from './activeSound';\nimport SoundAttempt from './sound-attempt';\nimport Score from './score';\nimport Scores from './scores';\nimport { combineReducers } from '@reduxjs/toolkit';\n\nconst reducer = combineReducers({\n  Menu,\n  Register,\n  Request,\n  Login,\n  Auth,\n  Settings,\n  ActiveField,\n  ActiveSound,\n  Counter,\n  Round,\n  NBack,\n  FieldAttempt,\n  SoundAttempt,\n  Score,\n  Scores,\n});\nexport type RootState = ReturnType<typeof reducer>;\nexport default reducer;\n","import logger from 'redux-logger';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport Reducers from './reducers';\n\nconst middleware = [...getDefaultMiddleware()];\n\nconst store = configureStore({\n  reducer: Reducers,\n  middleware,\n  devTools: process.env.NODE_ENV !== 'production',\n});\n\nexport default store;\nexport type AppDispatch = typeof store.dispatch;\n","import React, { useEffect } from 'react';\nimport './Progress.scss';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { RequestState } from '../../library/reducers/request';\nimport { render } from 'react-dom';\nimport * as Request from '../../library/reducers/request';\nimport { ProgressBar } from './progress-bar/ProgressBar';\nimport { useHistory } from 'react-router';\nimport { timeout } from 'q';\n\nexport const Progress = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const request: RequestState = useSelector((state: any) => state.Request);\n\n  const resetMessage = () => {\n    setTimeout(() => {\n      dispatch(Request.reset());\n    }, 5000);\n  };\n\n  useEffect(() => {\n    if (request.finished && request.success) {\n      setTimeout(() => {\n        history.push(request.redirect);\n      }, 1000);\n      resetMessage();\n    } else if (request.finished && request.failed) {\n      resetMessage();\n    }\n  }, [request.success]);\n\n  const renderText = () => {\n    return <p className='text'>{request.message}</p>;\n  };\n\n  const render = () => {\n    if (request.requesting) {\n      return (\n        <div className='in-progress'>\n          <ProgressBar />\n        </div>\n      );\n    } else if (request.finished && !request.failed) {\n      return <div className='finished'>{renderText()}</div>;\n    } else if (request.failed) {\n      return <div className='failed'>{renderText()}</div>;\n    } else {\n      return null;\n    }\n  };\n\n  if (request.requesting || request.finished || request.failed) {\n    return <div className='progress'>{render()}</div>;\n  } else return null;\n};\n","import React, { useEffect } from 'react';\nimport './App.scss';\nimport Navbar from './components/navbar/Navbar';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport Body from './components/body/Body';\nimport store from './library/store';\nimport { Provider, useSelector } from 'react-redux';\nimport { Progress } from './components/progress/Progress';\nimport { SocketService } from './services/socket.service';\nimport { AuthState } from './library/reducers/auth';\n\nconst App: React.FC = () => {\n  return (\n    <div className='react-root'>\n      <Provider store={store}>\n        <Router>\n          <div className='root-container'>\n            <div className='root-navbar'>\n              <Navbar></Navbar>\n            </div>\n            <div className='root-body'>\n              <Body></Body>\n            </div>\n            <div className='root-progress'>\n              <Progress />\n            </div>\n          </div>\n        </Router>\n      </Provider>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}